The lazy matrix mul Module:

Import module
    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
	
Make Sure Documentation Exists:

    >>> module_documentation = __import__("101-lazy_matrix_mul").__doc__
    >>> print(len(module_documentation) > 0)
    True

    >>> function_documentation = __import__("101-lazy_matrix_mul").lazy_matrix_mul.__doc__
    >>> print(len(function_documentation) > 0)
    True

# Valid Tests

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
    array([[ 7, 10],
           [15, 22]])

    >>> lazy_matrix_mul([[2, 1], [3, 5]], [[4, 6], [1, -3]])
    array([[ 9,  9],
           [17,  3]])

    >>> lazy_matrix_mul([[1, 2], [-2, -1]], [[0, 2], [5, 3]])
    array([[10,  8],
           [-5, -7]])
    
    >>> lazy_matrix_mul([[2, 1, 0], [3, 0, 5]], [[2, 0], [1, 3], [-1, 4]])
    array([[ 5,  3],
           [ 1, 20]])

#TypeError
    ### m_a and m_b must be a list

    >>> lazy_matrix_mul(([1, 2], [3, 4]), [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list

    >>> lazy_matrix_mul([[1, 2], [3, 4]], 'b')
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list

    ### m_a and m_b must be a list of lists

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [1, 2, 3, 4])
    Traceback (most recent call last):
    ...
    TypeError: m_b must be a list of lists

    >>> lazy_matrix_mul([1, 2, 3, 4], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a must be a list of lists

# ValueError
    ### m_a and m_b can't be a empty

    >>> lazy_matrix_mul([], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [])
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    >>> matrix_mul([[]], [1, 2, 3]))
    Traceback (most recent call last):
    ...
    ValueError: m_a can't be empty

    >>> matrix_mul([1, 2, 3], [[]]))
    Traceback (most recent call last):
    ...
    ValueError: m_b can't be empty

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

# TypeError
    ### m_a and m_b should contain only integers or floats

    >>> lazy_matrix_mul([['a', 'b'], ['c', 'd']], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: m_a should contain only integers or floats

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [['a', 'b'], ['c', 'd']])
    Traceback (most recent call last):
    ...
    TypeError: m_b should contain only integers or floats

    ### each row of m_a and m_b must be of the same size

    >>> lazy_matrix_mul([[1, 2], [3, 4, 5]], [[1, 2], [3, 4]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_a must be of the same size

    >>> lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2, 3], [4, 5]])
    Traceback (most recent call last):
    ...
    TypeError: each row of m_b must be of the same size

#ValueError
    ### m_a and m_b can't be multiplied

    >>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
    Traceback (most recent call last):
    ...
    ValueError: m_a and m_b can't be multiplied

    >>> lazy_matrix_mul()
    Traceback (most recent call last):
    ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'
